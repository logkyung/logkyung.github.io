{"componentChunkName":"component---src-templates-blog-template-js","path":"/2023-05-21/","result":{"data":{"cur":{"id":"517d509b-b114-5c22-948d-b3949b736932","html":"<h2 id=\"-javascript-문법-정리\" style=\"position:relative;\"><a href=\"#-javascript-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%A6%AC\" aria-label=\" javascript 문법 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 JavaScript 문법 정리</h2>\n<ul>\n<li>return 함수의 역할은 <strong>값 반환</strong> , <strong>함수 종료</strong> 두 가지가 있다.</li>\n<li>함수에 return문의 없으면 함수 종료 시 undefined 반환.</li>\n<li>undefined값의 경우\n<ul>\n<li>변수를 선언하고 아무 값도 할당하지 않았을 때</li>\n<li>반환 값이 없는 함수를 호출한 경우</li>\n<li>파라미터가 있는 함수에 호출 시 아무 값도 넘겨주지 않을 때</li>\n</ul>\n</li>\n<li>옵셔널 파라미터\n<ul>\n<li>함수 정의 시 파라미터에 기본 값을 할당해 준 경우 옵셔널 파라미터라고 함.</li>\n<li>옵셔널 파라미터는 선언할 때 가장 마지막에 해줘야 한다.</li>\n</ul>\n</li>\n<li>상수 선언 시 const 키워드 사용\n<ul>\n<li><code class=\"language-text\">const PI = 3.14;</code></li>\n<li>값을 재할당할 수 없기 때문에 값을 보호할 수 있다.</li>\n<li>선언 시 값을 할당해주지 않으면 안된다.</li>\n<li>상수 이름은 대문자와 밑줄로 표현해야 한다.</li>\n</ul>\n</li>\n<li>for statement\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for (초기화; 조건부; 증감부) {\n  동작부분;\n}</code></pre></div>\n<ul>\n<li>증감부는 채울 필요 없이 block 내에 작성해도 됨</li>\n<li>하지만 for 특성 상 증감부가 있기 때문에 block 내의 동작부에는 실제 반복할 내용만 집중, 조건과 관련된 부분은 소괄호 내의 증감부에 작성하여 목적에 맞는 코드 작성</li>\n<li>초기화 부분에서 생성한 변수는 로컬변수이다.</li>\n<li>조건 변수 생성 시 let 사용하는 것을 권장</li>\n</ul>\n</li>\n<li>while statement\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">while (조건부) {\n  동작부분;\n}</code></pre></div>\n<ul>\n<li>while에는 초기화 부분이 없기 때문에 반복 횟수를 카운트하기 위해서는 while 밖에 global 변수 선언</li>\n<li>조건부는 for문과 동일하게 작성</li>\n<li>반복 횟수 증감조건은 while 내에 작성</li>\n<li>while 문을 사용해야 할 경우\n<ul>\n<li>글로벌 변수를 조건부에서 비교하여 사용하고</li>\n<li>반복문 내에서도 변수를 다루면서</li>\n<li>반복문이 종료된 후에도 변수를 사용해야 할 때</li>\n</ul>\n</li>\n<li>continue;를 사용할 겨우에는 증감조건은 continue 앞에 작성해야 무한루프에 빠지지 않는다.</li>\n</ul>\n</li>\n<li>Object: 객체\n<ul>\n<li>여러가지 값을 한 번에 저장해야 할 때 사용</li>\n<li>중괄호 { }로 생성</li>\n<li>여러가지 다양한 값들을 쉼표(,)로 구분하여 저장</li>\n<li>각 값들을 명확하게 하기 위해 key: value 형태로 값을 저장</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let obj = {\n  Key1: Value1,\n  Key2: Value2,\n  Key3: {\n    key1: value1,\n    key2: value2,\n  },\n};</code></pre></div>\n<ul>\n<li>property name은 다음 규칙을 만족할 때 따옴표 없이 사용\n<ul>\n<li>첫글자는 문자, 밑줄, 달러($)로 시작해야 한다.</li>\n<li>띄어쓰기는 사용할 수 없다.</li>\n<li>하이픈(-)을 사용할 수 없다.</li>\n</ul>\n</li>\n<li>규칙에 벗어난 이름을 사용해야 할 경우 반드시 따옴표로 감싸줘야 한다.</li>\n<li>객체의 property에 접근하는 방법\n<ul>\n<li>점 표기법\n<ul>\n<li><code class=\"language-text\">obj.Key1;</code></li>\n<li><code class=\"language-text\">obj.Key3.key1;</code></li>\n</ul>\n</li>\n<li>대괄호 표기법\n<ul>\n<li><code class=\"language-text\">obj['Key1'];</code></li>\n<li><code class=\"language-text\">obj['Key1']['key1'];</code></li>\n</ul>\n</li>\n<li>존재하지 않는 property에 접근할 경우 undefined.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>for … in\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let obj = {\n\tname: 'kyung',\n\tage: 26,\n\tgender: 'f',\n};\n\nfor (let key in obj) {\n\tconsole.log(key); // name age gender\n\tconsole.log(obj[key]); // kyung 26 f</code></pre></div>\n<ul>\n<li>정수형 프로퍼티 네임 사용 시 주의사항\n<ul>\n<li>프로퍼티 네임에 정수형을 사용할 수 있지만 실제로 사용될 때는 문자열로 형변환 되어서 사용된다.</li>\n<li>이러한 예외적인 프로퍼티 네임은 대괄호 표기법으로만 접근이 가능하다.</li>\n<li>객체는 정수형 프로퍼티 네임을 오름차순으로 먼저 정렬, 나머지 프로퍼티들은 추가한 순서대로 정렬하는 특징이 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myObject = {\n\t3: ‘정수3’,\n\tname: ‘codeit’,\n\t1: ‘정수1’,\n\tbirthDay: ‘2017.5.17’,\n\t2: ‘정수2’,\n};\n\nfor (let key in myObject {\n\tconsole.log(key);  // 1 2 3 name birthDay\n}</code></pre></div>\n<ul>\n<li>for문을 사용하지 않고 콘솔에 객체를 출력만 해도 위와 같은 순서로 출력된다.</li>\n<li>자동으로 정렬되는 특성이 의도치 않은 결과를 가져올 수도 있기 때문에 일반적으로 정수형 프로퍼티는 잘 사용되지 않는다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","excerpt":"💡 JavaScript 문법 정리 return 함수의 역할은 값 반환 , 함수 종료 두 가지가 있다. 함수에 return문의 없으면 함수 종료 시 undefined 반환. undefined값의 경우 변수를 선언하고 아무 값도 할당하지 않았을 때 반환 값이 없는 함수를 호출한 경우 파라미터가 있는 함수에 호출 시 아무 값도 넘겨주지 않을 때 옵셔널 파라미터 함수 정의 시 파라미터에 기본 값을 할당해 준 경우 옵셔널 파라미터라고 함. 옵셔널 파라미터는 선언할 때 가장 마지막에 해줘야 한다. 상수 선언 시 const 키워드 사용  값을 재할당할 수 없기 때문에 값을 보호할 수 있다. 선언 시 값을 할당해주지 않으면 안된다. 상수 이름은 대문자와 밑줄로 표현해야 한다. for statement 증감부는 채울 필요 없이 block 내에 작성해도 됨 하지만 for 특성 상 증감부가 있기 때문에 block 내의 동작부에는 실제 반복할 내용만 집중, 조건과 관련된 부분은 소괄호 내의 증감부에 작…","frontmatter":{"date":"May 21, 2023","title":"JavaScript","categories":"블로그","author":"logkyung","emoji":"💡"},"fields":{"slug":"/2023-05-21/"}},"next":{"id":"7e551952-51ef-5871-87ba-4f3278e84ced","html":"<h2 id=\"1-테스트-글입니다\" style=\"position:relative;\"><a href=\"#1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B8%80%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"1 테스트 글입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 테스트 글입니다.</h2>\n<p>변경사항이 잘 반영이 되어야 할텐데…</p>","frontmatter":{"date":"May 19, 2023","title":"테스트 게시글입니다 !","categories":"블로그","author":"logkyung","emoji":"💖"},"fields":{"slug":"/2023-05-19/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://logkyung.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/2023-05-21/","nextSlug":"/2023-05-19/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}