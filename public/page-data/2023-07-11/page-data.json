{"componentChunkName":"component---src-templates-blog-template-js","path":"/2023-07-11/","result":{"data":{"cur":{"id":"78abc3fb-aada-5a1d-bb87-d5d90db5853a","html":"<h2 id=\"express-2\" style=\"position:relative;\"><a href=\"#express-2\" aria-label=\"express 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express (2)</h2>\n<h3 id=\"orm으로-데이터베이스-작업\" style=\"position:relative;\"><a href=\"#orm%EC%9C%BC%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%9E%91%EC%97%85\" aria-label=\"orm으로 데이터베이스 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ORM으로 데이터베이스 작업</h3>\n<p>자바스크립트로 데이터베이스를 다루기 위해서는 ‘클라이언트 객체’가 필요하다. 클라이언트 객체를 사용하기 위해서는, ORM을 이용해 자바스크립트로 작성한 데이터베이스 관련 코드를 자동으로 SQL로 변환한 후 클라이언트 객체를 통해 데이터베이스로 전달하는 방식이 있다.</p>\n<ol>\n<li>필요한 패키지를 설치한다.</li>\n</ol>\n<p><code class=\"language-text\">npm install mysql2 sequelize sequelize-cli</code></p>\n<ol start=\"2\">\n<li>Sequelize를 사용하기 위한 준비작업</li>\n</ol>\n<p><code class=\"language-text\">npx sequelize init</code></p>\n<ul>\n<li>config, migrations, models 디렉토리 생성</li>\n<li>config/config.json 파일 생성</li>\n<li>models/index.js 파일 생성</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>config.json의 development 객체에 db 정보 설정</p>\n</li>\n<li>\n<p>데이터베이스 생성</p>\n</li>\n</ol>\n<p><code class=\"language-text\">npx sequelize db:create --env development</code>\n개발용 환경의 데이터베이스 생성</p>\n<ol start=\"5\">\n<li>테이블 생성</li>\n</ol>\n<p><code class=\"language-text\">npx sequelize model:generate --name modelName --attributes attrName:dataType,attrName:dataType ...</code>\n데이터베이스에서 하나의 테이블은 sequelize에서 하나의 class에 해당하고, class의 객체 하나는 테이블에서 하나의 row에 해당한다.\n이때 modelName은 단수로 쓴다. 하지만 sequelize는 자동으로 복수형으로 변환해서 테이블에 적용한다. 또한 id column은 sequelize가 자동 생성하기 때문에 작성할 필요가 없다.</p>\n<ul>\n<li>migrations 디렉토리에 변경사항에 대한 정보가 담긴 마이그레이션 파일이 생성된다.</li>\n<li>models 디렉토리에 modelName.js 파일이 생성된다</li>\n<li>마이그레이션 파일에 createdAt, updatedAt 속성이 자동으로 추가되어있다. 이 속성의 defaultValue 속성에 Sequelize.fn(‘now’)를 추가해 현재 시간이 설정되게 한다.</li>\n</ul>\n<ol start=\"6\">\n<li>데이터베이스에 테이블 생성</li>\n</ol>\n<p><code class=\"language-text\">npx sequelize db:migrate</code>\nmigrations 디렉토리에 있는 모든 마이그레이션 파일들을 적용한다.</p>\n<ol start=\"7\">\n<li>seed 데이터 생성</li>\n</ol>\n<p><code class=\"language-text\">npx sequelize seed:generate --name seedName</code>\nseeders 디렉토리에 (생성일자와시간)-seedName.js 파일이 생성된다. 파일에 JSON 형식의 데이터 배열로 넣어준다.</p>\n<ol start=\"8\">\n<li>테이블에 데이터 추가</li>\n</ol>\n<p><code class=\"language-text\">npx sequelize db:seed:all</code>\nseeders 디렉토리에 있는 모든 seed 파일들이 적용된다.</p>","excerpt":"Express (2) ORM으로 데이터베이스 작업 자바스크립트로 데이터베이스를 다루기 위해서는 ‘클라이언트 객체’가 필요하다. 클라이언트 객체를 사용하기 위해서는, ORM을 이용해 자바스크립트로 작성한 데이터베이스 관련 코드를 자동으로 SQL로 변환한 후 클라이언트 객체를 통해 데이터베이스로 전달하는 방식이 있다. 필요한 패키지를 설치한다.  Sequelize를 사용하기 위한 준비작업  config, migrations, models 디렉토리 생성 config/config.json 파일 생성 models/index.js 파일 생성 config.json의 development 객체에 db 정보 설정 데이터베이스 생성 \n개발용 환경의 데이터베이스 생성 테이블 생성 \n데이터베이스에서 하나의 테이블은 sequelize에서 하나의 class에 해당하고, class의 객체 하나는 테이블에서 하나의 row에 해당한다.\n이때 modelName은 단수로 쓴다. 하지만 sequelize는 자동으로 …","frontmatter":{"date":"July 11, 2023","title":"Express 정리 (2)","categories":"Express","author":"logkyung","emoji":"💡"},"fields":{"slug":"/2023-07-11/"}},"next":{"id":"50c96e13-16dd-5686-8aef-a3b0cfe8b67e","html":"<h2 id=\"express\" style=\"position:relative;\"><a href=\"#express\" aria-label=\"express permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express</h2>\n<h3 id=\"express-기초\" style=\"position:relative;\"><a href=\"#express-%EA%B8%B0%EC%B4%88\" aria-label=\"express 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express 기초</h3>\n<p>Express: Node.js 환경에서 실행되는 서버 프로그램을 만들 때 사용하는 웹 프레임워크. 서버 프로그램에 필요한 최소한의 기능만 제공하기 때문에 전체적인 구조 설계는 개발자의 몫이다.</p>\n<p>서버는 두 가지로 나뉜다.</p>\n<ul>\n<li>Web Server: 화면을 그리기 위해 필요한 HTML, CSS, JavaScript 코드들을 보내주는 서버</li>\n<li>API Server: Client가 request를 보내면 작업을 처리하고 결과 데이터를 response의 body에 담아서 보내는 서버</li>\n</ul>\n<p>이번 학습에서는 API Server를 만드는 것을 목표로 한다.</p>\n<p><code class=\"language-text\">const app = express();</code>\nexpress 객체를 생성한다. express로 만든 객체는 주로 app으로 하는 것이 관례이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.get('/hello', (req, res) => {\n\tres.send('&lt;h1>Hello Express!&lt;/h1>);\n});</code></pre></div>\n<p>app.get(path, callback): 특정 path(여기서는 /hello)에 대해 들어온 요청과 응답을 다루는 콜백을 등록하는 함수이다.\nres.send([body]): HTTP response를 보내는 response 객체의 메소드. 파라미터는 Buffer, String, 객체, Boolean, 또는 배열일 수 있다. 여기서는 HTML 코드를 화면에 표시한다.\n특정 path에 대응하는 콜백을 route handler라고도 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.listen(3000, () => {\n\tconsole.log('Server is listening...');\n});</code></pre></div>\n<p>서버가 요청을 들을 준비를 마치고 나면 콜백이 자동으로 실행된다.\n<br>\n직원 정보를 다루는 API Server를 만들어 보자. 직원 정보를 조회, 추가, 수정, 삭제 등의 작업을 하는 서버이다.\n직원 정보가 담긴 JSON 데이터를 배열에 담고, 전체 직원 정보를 조회하는 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let members = require('./members');\n\napp.get('/api/members', (req, res) => {\n\tres.send(members);\n});</code></pre></div>\n<p>그럼 특정 직원 한 명의 정보는 어떻게 조회할 수 있을까.\n예를 들어, 특정 직원의 정보를 요청하는 URL의 path가 ‘/api/members/2’와 같다고 할 때 members/ 뒤의 숫자는 직원에 따라 다 다를 것이다. 그렇다면 이처럼 URL에 가변적인 값이 들어가는 경우에는 어떻게 처리할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.get('/api/members/:id', (req, res) => {\n\t// const id = req.params.id;\n\tconst { id } = req.params;\n\tconst member = members.find((m) => m.id === Number(id));\n\tif (member) {\n\t\tres.send(member);\n\t} else {\n\t\tres.status(404).send({ message: \"There is no such member\" });\n\t}\n});</code></pre></div>\n<p>path에 있는 “:id”와 같은 부분을 route parameter라고 한다. ”:” 기호는 뒤에 오는 값을 req.params의 id 속성에 담으라는 express의 표기법이다.\n즉 ‘/api/members/2’에서 2라는 값은 req.params.id의 값이 된다.\n이제 members 배열에서 해당 id와 일치하는 직원을 찾아 member에 넘겨주면 되는데 <code class=\"language-text\">const member = members.find((m) => m.id === Number(id));</code> 가 그것이다. 배열의 find 메소드를 이용해, 인자로 들어온 콜백함수가 true인 여러 요소 중 첫 번째 요소를 리턴한다.\n해당 직원의 정보가 없을 때를 else문 안에서 처리하고 있다. 리퀘스트가 요청한 id의 직원 정보가 없다면, response의 상태 코드에 적절한 코드를 설정해줘야 한다. 여기서는 404 코드를 설정해주었다. 이때 body에 추가 메시지를 담아 보내려면 send 메소드를 뒤이어 붙이고, 인자로 정보를 넣어주면 된다. 문자열 자체를 보내는 것보다, 메시지도 하나의 JSON 데이터 형태로 넣어주는 게 나중에 추가 정보를 넣어야 할 때 확장하기 용이하다.\n<br>\n이제 특정 팀에 속한 직원들을 조회해보자.\n경로는 /api/members?team=engineering 혹은 /api/members?team=marketing 과 같이 정할 수 잇다. 이때 ?부터 시작하는 부분은 query 라고 한다.\n서버에 있는 리소스를 조회할 때 필터하거나 정렬하는 기준을 정하기 위해 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.get('/api/members', (req, res) => {\n\tconst { team } = req.query;\n\tif (team) {\n\t\tconst teamMembers = members.filter((m) => m.team === team);\n\t\tres.send(teamMembers);\n\t} else {\n\t\tres.send(members);\n\t}\n});</code></pre></div>\n<p>먼저 URL의 query문은 req 객체의 query로 가져올 수 있다.\n여기서 if로 분기를 나눠 team이 있다면 team에 속한 직원들 정보를 필터해 보내줄 것이고, 그렇지 않다면 전체 직원 정보를 조회하도록 한다.\nteam에 속한 직원들은 filter 메소드를 이용해 가져온다. filter는 배열의 각 요소를 순회하면서 콜백이 true인 요소만 모아 새로운 배열을 만든다.\n<br></p>\n<h3 id=\"post-리퀘스트\" style=\"position:relative;\"><a href=\"#post-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8\" aria-label=\"post 리퀘스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POST 리퀘스트</h3>\n<p>POST 리퀘스트는 새 직원을 추가하고자 할 때 사용한다.\n사실 get 메소드는 GET 리퀘스트만 담당하는 메소드이다. POST 리퀘스트를 처리하려면 post 메소드를 사용하면 된다.\nPOST 리퀘스트는 직원 정보를 리퀘스트의 바디에 담아서 보내기 때문에 서버에서 바디의 내용을 별도 처리해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.post('/api/members', (req, res) => {\n\tconsole.log(req.body);\n})</code></pre></div>\n<p>현재로서는 브라우저에서 리퀘스트를 보낼 수 없기 때문에 rest client 플러그인을 설치해 리퀘스트를 보내도록 한다.\n설치한 후 test.http라는 http 확장자를 가진 파일을 추가하고 <code class=\"language-text\">GET http://localhost:포트번호</code> 이렇게 작성하면 Send Request 버튼이 생기는데, 버튼을 누르면 request가 보내지고 response 화면이 나타난다.\n밑에 ###(리퀘스트를 구분하기 위한 표시)를 해주고 POST 리퀘스트를 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET http://localhost:3000/api/members\n\n###\nPOST http://localhost:3000/api/members\nContent-Type: application/json\n\n{\n\tid: 11,\n\tname: 어쩌구,\n\t...\n}</code></pre></div>\n<p>POST 리퀘스트 문장과 밑의 Content-Type 문장까지가 리퀘스트의 head, 밑의 데이터 부분이 body이다.\n하지만 이렇게 리퀘스트를 보내면 undefined가 출력되는데, req의 body에 내용을 담으려면 한 가지 작업이 필요하다.\n익스프레스를 사용할 때 바디가 있는 리퀘스트를 처리하려면 <code class=\"language-text\">app.use(express.json());</code> 코드를 추가해주어야 한다. 이 메소드는 리퀘스트의 바디에 JSON 데이터가 있으면 그것을 추출해서 req 객체의 body프로퍼티의 값으로 설정해준다. 이렇게 리퀘스터가 핸들러에 의해 처리되기 전에 별도의 처리를 수행하는 함수를 익스프레스에서는 middleware라고 한다.\n이제 정보가 잘 들어오므로 들어온 정보를 배열에 추가하고 조회할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.post('/api/members', (req, res) => {\n\tconst newMember = req.body;\n\tmembers.push(newMember);\n\tres.send(newMember);\n});</code></pre></div>\n<br>\n### PUT 리퀘스트\n```\napp.put('/api/members/:id', (req, res) => {\n\tconst { id } = req.params;\n\tconst newInfo = req.body;\n\tconst member = members.find((m) => m.id === Number(id));\n\tif (member) {\n\t\tObject.keys(newInfo).forEach((prop) => {\n\t\t\tmember[prop] = newInfo[prop];\n\t\t});\n\t\tres.send(member);\n\t} else {\n\t\tres.status(404).send({ message: \"There is no member with the id!\" });\n\t}\n});\n```\n- path에서 id 추출\n- response body에서 새로운 직원 정보 추출\n- 수정할 직원 특정\n- 만약 해당 id를 가진 직원이 존재한다면\n\t- newInfo 객체의 프로퍼티를 순회하면서 기존 데이터의 값에 newInfo의 값 저장\n\t- Object 객체의 keys 메소드를 사용하면 특정 객체의 모든 프로퍼티를 순회할 수 있다\n- 직원이 존재하지 않는다면\n\t- 404코드 처리\n<br>\n### DELETE 리퀘스트\n```\napp.delete('/api/members/:id', (req, res) => {\n\tconst { id } = req.params;\n\tconst membersCount = members.length;\n\tconst members = members.filter((m) => m.id !== Number(id));\n\tif (members.length < membersCount) {\n\t\tres.send('Deleted!');\n\t} else {\n\t\tres.status(404).send({ message: \"There is no member with the id!\" });\n\t}\n});\n```","frontmatter":{"date":"July 09, 2023","title":"Express 정리 (1)","categories":"Express","author":"logkyung","emoji":"💡"},"fields":{"slug":"/2023-07-09/"}},"prev":{"id":"40d818ea-b84d-50e1-8a4e-60bb43caa9fc","html":"<h2 id=\"javascript\" style=\"position:relative;\"><a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript</h2>\n<h3 id=\"id로-태그-선택하기\" style=\"position:relative;\"><a href=\"#id%EB%A1%9C-%ED%83%9C%EA%B7%B8-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0\" aria-label=\"id로 태그 선택하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>id로 태그 선택하기</h3>\n<p><code class=\"language-text\">document.getElementById('id')</code>\n단 하나의 요소만 선택할 때는 태그에 id를 부여하고 getElementById 메소드를 사용한다. 존재하지 않는 id의 태그에 접근하려고 하면 null을 리턴한다.</p>\n<h3 id=\"class로-태그-선택\" style=\"position:relative;\"><a href=\"#class%EB%A1%9C-%ED%83%9C%EA%B7%B8-%EC%84%A0%ED%83%9D\" aria-label=\"class로 태그 선택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>class로 태그 선택</h3>\n<p><code class=\"language-text\">document.getElementsByClassName('class')</code>\n같은 클래스 이름을 가진 태그들의 배열의 형태로 리턴된다. 완벽한 배열이 아니기 때문에 배열의 메소드를 사용할 수는 없지만, 대괄호 표기법으로 요소들에 접근하거나 length를 사용하거나 for…of문을 사용할 수 있어 유사배열(Array-Like Object)이라고 한다.  순서는 태그의 깊이와 상관 없이 위에서부터 순서대로이다. 만약 없는 값에 접근하면 undefined 값을 리턴한다. 또 한 가지 주의할 점은 같은 클래스 이름을 여러 태그가 가질 수 있기 때문에 메소드 이름이 Element<strong>s</strong>라는 것.</p>\n<h3 id=\"태그-이름으로-선택\" style=\"position:relative;\"><a href=\"#%ED%83%9C%EA%B7%B8-%EC%9D%B4%EB%A6%84%EC%9C%BC%EB%A1%9C-%EC%84%A0%ED%83%9D\" aria-label=\"태그 이름으로 선택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>태그 이름으로 선택</h3>\n<p><code class=\"language-text\">document.getElementsByTagName('tag')</code>\n클래스로 태그 선택할 때와 마찬가지로 같은 종류의 태그들이 배열의 형태로 리턴된다. 역시 유사배열의 형태를 가지고 있으며, css 선택자처럼 <strong>*</strong> 값을 전달하면 모든 태그를 선택할 수 있다.</p>\n<h3 id=\"css-선택자로-태그-선택\" style=\"position:relative;\"><a href=\"#css-%EC%84%A0%ED%83%9D%EC%9E%90%EB%A1%9C-%ED%83%9C%EA%B7%B8-%EC%84%A0%ED%83%9D\" aria-label=\"css 선택자로 태그 선택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css 선택자로 태그 선택</h3>\n<p><code class=\"language-text\">document.querySelector('css')</code>\n예를 들어, 아래와 같은 html 코드가 있을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE  html>\n&lt;html  lang=\"ko\">\n&lt;head>\n  &lt;meta  charset=\"UTF-8\">\n  &lt;title>JS with Codeit&lt;/title>\n  &lt;link  rel=\"stylesheet\" href=\"style.css\">\n&lt;/head>\n&lt;body>\n  &lt;div id=\"myDiv\">Hello World&lt;/div>\n  &lt;ul id=\"myList\">\n    &lt;li class=\"my-list\">JavaScript&lt;/li>\n    &lt;li class=\"my-list\">Nodejs&lt;/li>\n    &lt;li class=\"my-list\">React&lt;/li>\n  &lt;/ul>\n  &lt;script  src=\"index.js\">&lt;/script>\n&lt;/body>\n&lt;/html></code></pre></div>\n<p>id로 선택하려면</p>\n<ul>\n<li><code class=\"language-text\">document.querySelector('#myDiv');</code></li>\n<li><code class=\"language-text\">document.querySelector('#myList');</code></li>\n</ul>\n<p>와 같이 선택할 수 있다.\nclass 이름으로 선택하는 경우는 어떨까\n<code class=\"language-text\">document.querySelector('.my-list');</code>와 같이 선택할 수 있다.\n하지만 여기서 주의할 점은, 이렇게 하면 ‘my-list’라는 이름을 가진 li 태그 세 개가 선택될 것 같지만 querySelector 메소드는 여러 개 중 가장 첫 번째 요소만 선택한다. 따라서 여러 개를 같이 선택하고 싶은 경우는\n<code class=\"language-text\">document.querySelectorAll('.my-list');</code> 처럼 querySelectorAll 메소드를 사용해야 한다. 마찬가지로 태그들이 nodeList 라는 유사 배열의 형태로 선택되며, 없는 값에 접근할 경우 비어있는 nodeList가 리턴된다.</p>","frontmatter":{"date":"July 13, 2023","title":"Interactive JavaScript (1)","categories":"JavaScript","author":"logkyung","emoji":"💡"},"fields":{"slug":"/2023-07-13/"}},"site":{"siteMetadata":{"siteUrl":"https://logkyung.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/2023-07-11/","nextSlug":"/2023-07-09/","prevSlug":"/2023-07-13/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}