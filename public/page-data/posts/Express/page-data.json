{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Express","result":{"pageContext":{"currentCategory":"Express","categories":["All","JavaScript","Express","Node.js","블로그"],"edges":[{"node":{"id":"78abc3fb-aada-5a1d-bb87-d5d90db5853a","excerpt":"Express (2) ORM으로 데이터베이스 작업 자바스크립트로 데이터베이스를 다루기 위해서는 ‘클라이언트 객체’가 필요하다. 클라이언트 객체를 사용하기 위해서는, ORM을 이용해 자바스크립트로 작성한 데이터베이스 관련 코드를 자동으로 SQL로 변환한 후 클라이언트 객체를 통해 데이터베이스로 전달하는 방식이 있다. 필요한 패키지를 설치한다.  Sequelize를 사용하기 위한 준비작업  config, migrations, models 디렉토리 생성 config/config.json 파일 생성 models/index.js 파일 생성 config.json의 development 객체에 db 정보 설정 데이터베이스 생성 \n개발용 환경의 데이터베이스 생성 테이블 생성 \n데이터베이스에서 하나의 테이블은 sequelize에서 하나의 class에 해당하고, class의 객체 하나는 테이블에서 하나의 row에 해당한다.\n이때 modelName은 단수로 쓴다. 하지만 sequelize는 자동으로 …","fields":{"slug":"/2023-07-11/"},"frontmatter":{"categories":"Express","title":"Express 정리 (2)","date":"July 11, 2023"}},"next":{"fields":{"slug":"/2023-07-09/"}},"previous":{"fields":{"slug":"/2023-07-13/"}}},{"node":{"id":"50c96e13-16dd-5686-8aef-a3b0cfe8b67e","excerpt":"Express Express 기초 Express: Node.js 환경에서 실행되는 서버 프로그램을 만들 때 사용하는 웹 프레임워크. 서버 프로그램에 필요한 최소한의 기능만 제공하기 때문에 전체적인 구조 설계는 개발자의 몫이다. 서버는 두 가지로 나뉜다. Web Server: 화면을 그리기 위해 필요한 HTML, CSS, JavaScript 코드들을 보내주는 서버 API Server: Client가 request를 보내면 작업을 처리하고 결과 데이터를 response의 body에 담아서 보내는 서버 이번 학습에서는 API Server를 만드는 것을 목표로 한다. \nexpress 객체를 생성한다. express로 만든 객체는 주로 app으로 하는 것이 관례이다. app.get(path, callback): 특정 path(여기서는 /hello)에 대해 들어온 요청과 응답을 다루는 콜백을 등록하는 함수이다.\nres.send([body]): HTTP response를 보내는 response…","fields":{"slug":"/2023-07-09/"},"frontmatter":{"categories":"Express","title":"Express 정리 (1)","date":"July 09, 2023"}},"next":{"fields":{"slug":"/2023-07-07/"}},"previous":{"fields":{"slug":"/2023-07-11/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}