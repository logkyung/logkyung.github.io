{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/블로그","result":{"pageContext":{"currentCategory":"블로그","categories":["All","JavaScript","Express","Node.js","블로그"],"edges":[{"node":{"id":"fb6a0237-07ae-59dc-aa8b-ae99c2f2ad27","excerpt":"9강. 연결 리스트 (3) 연결 리스트가 유용한 경우 연결 리스트의 장점: 삽입과 삭제가 유용하다\n따라서 중간 삽입과 삭제가 빈번한 시나리오의 경우 연결리스트 사용이 유리할 수 있다.\n하지만 현재의 연결 리스트는 삽입과 삭제 시 position을 앞에서부터 탐색해서 찾아와야 하기 때문에 그다지 유용한 것 같지 않음\n이에 대한 해결책으로 새로운 메서드를 만든다 insertAt(prev, newNode) popAfter(prev) position을 인자로 주는 것이 아니라 한 노드를 넘겨주고 그 뒤에 삽입, 뒤의 노드를 삭제하는 방법으로 변경\n하지만 head 노드의 경우 prev 노드가 없는데 어떻게 할 것인가? 하는 문제 발생\n이를 위해 head에 dummy node 추가 원소 삽입 prev가 가리키는 node의 다음에 newNode를 삽입 성공/실패에 따라 True/False 반환 원소 삭제 prev의 다음 node 삭제 그 node의 data를 리턴 주의사항 prev가 마지막 n…","fields":{"slug":"/TIL_230531/"},"frontmatter":{"categories":"블로그","title":"파이썬 자료구조와 알고리즘 (4)","date":"May 31, 2023"}},"next":{"fields":{"slug":"/TIL_230528/"}},"previous":{"fields":{"slug":"/2023-06-21/"}}},{"node":{"id":"c9b21417-b504-5fbe-85e2-1fb87a81a001","excerpt":"6강. 알고리즘 복잡도(Complexity) 시간 복잡도 문제 크기와 해결 시간 사이의 관계 공간 복잡도 문제 크기와 필요한 메모리 공간 사이 관계 Big-O Notation 알고리즘 복잡도를 표현할 때 쓰이는 점근 표기법 중 하나\n예를 들어, 입력의 크기가 n일 때 O(log n): 입력의 크기의 로그에 비례하는 시간 소요 O(n): 입력 크기에 비례하는 시간 소요 선형 시간 알고리즘: O(n) 무작위 배열에서 최댓값을 찾는 문제에 해당\n끝까지 살펴보기 전에는 알 수 없다 Average Case: O(n) Worst Case: O(n) 로그 시간 알고리즘: O(log n) 크기순으로 정렬된 배열에서 이진 탐색하는 문제 이차 시간 알고리즘 삽입 정렬과 같은 문제 보다 낮은 복잡도를 가지는 정렬 알고리즘 병합 정렬(merge sort)의 경우 O(nlogn)\n정렬 문제에 대해 O(nlogn)보다 낮은 복잡도를 갖는 알고리즘은 없다.\n 7강. 연결 리스트 (Linked List) (1…","fields":{"slug":"/TIL_230528/"},"frontmatter":{"categories":"블로그","title":"파이썬 자료구조와 알고리즘 (3)","date":"May 28, 2023"}},"next":{"fields":{"slug":"/TIL_230527/"}},"previous":{"fields":{"slug":"/TIL_230531/"}}},{"node":{"id":"ee1d717f-6704-5dd3-a387-a5e899936b60","excerpt":"3강 ~ 5강 3강. 정렬(sort), 탐색(search) 정렬 배열의 원소들을 정해진 기준에 따라 나열하는 것 ex) 오름차순 정렬, 내림차순 정렬 sorted(L, key=lambda x: len(x)) # [‘xyz’, ‘abcd’, ‘spam’] L = [{‘name’: ‘John’, ‘score’: 83},\n{‘name’: ‘Paul’, ‘score’: 92}]\nL.sort(key=lambda x: x[‘name’]) # 이름 순으로 정렬\nL.sort(key=lambda x: x[‘score’], reverse=True) # 점수가 높은 순으로 정렬 def solution(L, x):\nstart, end = 0, len(L)-1\nwhile start <= end:\nmid = (start+end)//2\nif L[mid] == x:\nreturn mid\nelif L[mid] < x:      # 중간 값이 x보다 작으면 왼쪽 탐색 종료\nstart = mid+1\nelse:    …","fields":{"slug":"/TIL_230527/"},"frontmatter":{"categories":"블로그","title":"파이썬 자료구조와 알고리즘 (2)","date":"May 27, 2023"}},"next":{"fields":{"slug":"/Python_Algorithm/"}},"previous":{"fields":{"slug":"/TIL_230528/"}}},{"node":{"id":"deb25420-1614-5eac-a10b-0734b6b28ffa","excerpt":"(1) 정렬된 리스트에 원소 삽입 문제 설명 리스트 L과 정수 x가 인자로 주어질 때, 리스트 내의 올바른 위치에 x를 삽입하여 그 결과 리스트를 반환하는 함수 solution을 완성하세요. My solution My solution","fields":{"slug":"/Python_Algorithm/"},"frontmatter":{"categories":"블로그","title":"파이썬 자료구조와 알고리즘","date":"May 26, 2023"}},"next":{"fields":{"slug":"/JavaScript/"}},"previous":{"fields":{"slug":"/TIL_230527/"}}},{"node":{"id":"f06dc468-9d22-5009-a357-b7321552bf92","excerpt":"💡 JavaScript 문법 정리 return 함수의 역할은 값 반환 , 함수 종료 두 가지가 있다. 함수에 return문의 없으면 함수 종료 시 undefined 반환. undefined값의 경우 변수를 선언하고 아무 값도 할당하지 않았을 때 반환 값이 없는 함수를 호출한 경우 파라미터가 있는 함수에 호출 시 아무 값도 넘겨주지 않을 때 옵셔널 파라미터 함수 정의 시 파라미터에 기본 값을 할당해 준 경우 옵셔널 파라미터라고 함. 옵셔널 파라미터는 선언할 때 가장 마지막에 해줘야 한다. 상수 선언 시 const 키워드 사용  값을 재할당할 수 없기 때문에 값을 보호할 수 있다. 선언 시 값을 할당해주지 않으면 안된다. 상수 이름은 대문자와 밑줄로 표현해야 한다. for statement 증감부는 채울 필요 없이 block 내에 작성해도 됨 하지만 for 특성 상 증감부가 있기 때문에 block 내의 동작부에는 실제 반복할 내용만 집중, 조건과 관련된 부분은 소괄호 내의 증감부에 작…","fields":{"slug":"/JavaScript/"},"frontmatter":{"categories":"블로그","title":"JavaScript","date":"May 21, 2023"}},"next":{"fields":{"slug":"/2023-05-19/"}},"previous":{"fields":{"slug":"/Python_Algorithm/"}}},{"node":{"id":"7e551952-51ef-5871-87ba-4f3278e84ced","excerpt":"1. 테스트 글입니다. 변경사항이 잘 반영이 되어야 할텐데…","fields":{"slug":"/2023-05-19/"},"frontmatter":{"categories":"블로그","title":"테스트 게시글입니다 !","date":"May 19, 2023"}},"next":null,"previous":{"fields":{"slug":"/JavaScript/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}