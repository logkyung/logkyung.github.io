"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = selfHosted;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _postcss = _interopRequireDefault(require("postcss"));
var _postcssJs = _interopRequireDefault(require("postcss-js"));
var _path = _interopRequireDefault(require("path"));
var _fs = require("fs");
var _excluded = ["family", "urls"];
var defaultFontOptions = {
  fontDisplay: "swap"
};
function selfHosted(_ref, reporter) {
  var cacheFolder = _ref.cacheFolder,
    directory = _ref.directory,
    _ref$pathPrefix = _ref.pathPrefix,
    pathPrefix = _ref$pathPrefix === void 0 ? "" : _ref$pathPrefix;
  var getFontFace = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(font) {
      var _createFontOptions, family, urls, cssProperties, src, _yield$postcss$proces, css;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _createFontOptions = createFontOptions(font), family = _createFontOptions.family, urls = _createFontOptions.urls, cssProperties = (0, _objectWithoutPropertiesLoose2.default)(_createFontOptions, _excluded);
              src = Object.entries(urls).map(function (_ref3) {
                var format = _ref3[0],
                  url = _ref3[1];
                var sourcePath = _path.default.join(directory, url);
                if (!(0, _fs.existsSync)(sourcePath)) {
                  reporter.panicOnBuild("Specified selfHosted font file missing: \"" + sourcePath + "\"");
                  return "";
                }
                var fileName = _path.default.basename(url);
                var cssDir = _path.default.join(pathPrefix ? pathPrefix : "/", "static", "webfonts");
                if (!(0, _fs.existsSync)(cacheFolder)) {
                  (0, _fs.mkdirSync)(cacheFolder, {
                    recursive: true
                  }, function (err) {
                    reporter.error(err);
                  });
                }
                var outputPath = _path.default.join(cacheFolder, fileName);
                (0, _fs.copyFileSync)(sourcePath, outputPath, _fs.constants.COPYFILE_FICLONE, function (err) {
                  reporter.error(err);
                });
                return "url(\"" + cssDir + "/" + fileName + "\") format(\"" + format + "\")";
              });
              _context.next = 4;
              return (0, _postcss.default)().process(cssProperties, {
                parser: _postcssJs.default,
                from: undefined
              });
            case 4:
              _yield$postcss$proces = _context.sent;
              css = _yield$postcss$proces.css;
              return _context.abrupt("return", "\n      @font-face {\n        font-family: \"" + family + "\";\n        src: " + src + ";\n        " + css + "\n      }\n    ");
            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function getFontFace(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  return function (fonts) {
    return Promise.all(fonts.map(getFontFace));
  };
}
function createFontOptions(options) {
  return (0, _extends2.default)({}, defaultFontOptions, options);
}